
/* najjednostavniji dma controller

 ne može prenositi ui->ui (zbog duplog čekanja)
 nema fifo nego čita i piše 1-na-1
 ima istu veličinu podatka i za SRC i za DEST
 ima istu duljinu bursta i za SRC i za DEST
 transfer size je višekratnik burst size-a
*/


component DMAC_simple (
        // SLAVE AHB interface
        in<32> --HADDR, out<32> --HRDATA, in<32> --HWDATA,
        in<3> --HSIZE, in --HWRITE, out --HREADY, in --HSEL,

        // MASTER AHB interface
        out<32> --HADDRM, in<32> --HRDATAM, out<32> --HWDATAM, out<3> --HSIZEM,
        out --HWRITEM, in --HREADYM, out --nMREQM,

        // bus and interrupt requests
        out --HBUSREQ, in --HGRANT, out --INTR,
        
        // DMA requests from peripherals
        //last i single za sada ne qqq
        in  --DMA_REQ_0, in  --DMA_REQ_1, in  --DMA_REQ_2, in  --DMA_REQ_3, 
        out --DMA_ACK_0, out --DMA_ACK_1, out --DMA_ACK_2, out --DMA_ACK_3
        )
{

    macro BYTE_size     = 0;
    macro HALFWORD_size = 1;
    macro WORD_size     = 2;
    
    macro M_to_M   = 0;
    macro M_to_UI  = 1;
    macro UI_to_M  = 2;

    macro C_config_Intr_Enable    = C_config[7];
    macro C_config_DMA_Req_Enable = C_config[6];
    macro C_config_Transf_Width   = C_config[5..4];
    macro C_config_Src_Incr       = C_config[3];
    macro C_config_Dest_Incr      = C_config[2];  
    macro C_config_DMA_Req_Idx    = C_config[1..0];

    macro C_sizes_Burst_Size     = C_sizes[12..14];    
    macro C_sizes_Transf_Size    = C_sizes[0..11];
    
    macro very_light_gray  = #E5E5E5;

    
    trace log_dmac_events {
        name: "Log DMAC-events to Console";
        default: false;
    }
    
    trace pause_after_each_transferred_data {
        name: "Pause after each data-transfer";
        default: false;
    }
    
    ///////////////////////////////////////////////////////////////
    //
    //    DISPLAY/ANIMATION
    //
    ///////////////////////////////////////////////////////////////

    ///////    //   //  ///////  ///////  ///////    //    //
    //          // //     //     //       //    //   ///   //
    //           //       //     //       //    //   ////  //
    /////       ////      //     //////   ///////    // // //
    //         //  //     //     //       //  //     //  ////
    //        //    //    //     //       //   //    //   ///
    ///////  //      //   //     ///////  //    //   //    //
    
    external display {
    
        // master and slave pins "above the component"
        rectangle slave_pins {
            x: 30; y: 0;
            width: 10;
            height: 19;
            fill_color: light_gray;
            line_color: light_gray;
            text: "S";
        }
        
        rectangle master_pins {
            x: 70; y: 0;
            width: 10;
            height: 19;
            fill_color: very_light_gray;
            line_color: very_light_gray;
            text: "M";
            text_color: light_gray;
        }
        
        // title and border
        rectangle {
            x: 0;
            y: 20;
            width: 110;
            height: 85;
            fill_color: #FFFFFF;
        }
        label {
            x: 0;
            y: 21;
            width: 110;
            height: 15;
            text: "DMAC";
        }

        plus_mark {
            x:0; y:20;
        }        
        check_mark {
            x:8; y:20;
        }

        // transfer size counter register
        label {
            x: 10;
            y: 40;
            width: 24;
            height: 14;
            text: "CNT:";
            text_size: 10;
        }
        rectangle transfer_counter {
            x: 8;
            y: 56;
            width: 26;
            height: 14;
            text: "4096";
            text_size: 10;
        }
        
        // hbusreq, hgrant and intr labels and pins
        
        label {
            x: 60;
            y: 40;
            width: 45;
            height: 14;
            text: "HBUSREQ";
            text_size: 10;
        }
        right_arrow hbusreq_arrow {
            x: 110; y: 47;
        }

        label {
            x: 61;
            y: 57;
            width: 45;
            height: 14;
            text: "HGRANT";
            text_size: 10;
        }
        left_arrow hgrant_arrow {
            x: 125; y: 64;
        }

        label {
            x: 73;
            y: 73;
            width: 35;
            height: 14;
            text: "INTR";
            text_size: 10;
        }
        right_arrow intr_arrow {
            x: 110; y: 80;
        }
        
        // DMA-request and DMA-acknowledge labels

        label {
            x: 0;
            y: 90;
            width: 110;
            height: 15;
            text: "0        1        2        3";
            text_size: 10;
        }
        
        // DMA-req and DMA-ack pins
        up_arrow req_0_arrow {
            x: 8; y: 120;
        }
        down_arrow ack_0_arrow {
            x: 15; y: 105;
        }

        up_arrow req_1_arrow {
            x: 37; y: 120;
        }
        down_arrow ack_1_arrow {
            x: 44; y: 105;
        }

        up_arrow req_2_arrow {
            x: 66; y: 120;
        }
        down_arrow ack_2_arrow {
            x: 73; y: 105;
        }

        up_arrow req_3_arrow {
            x: 95; y: 120;
        }
        down_arrow ack_3_arrow {
            x: 102; y: 105;
        }
    }


    //   //    //  ///////  ///////  ///////    //    //
    //   ///   //    //     //       //    //   ///   //
    //   ////  //    //     //       //    //   ////  //
    //   // // //    //     //////   ///////    // // //
    //   //  ////    //     //       //  //     //  ////
    //   //    //    //     //       //   //    //   ///
    //   //    //    //     ///////  //    //   //    //

    
    display {

        // title and border
        rectangle {
            x: 0;
            y: 0;
            width: 200;
            height: 150;
            fill_color: #FFFFFF;
        }
        
        // channel enable bit
        label enable_i {
            x: 12;
            y: 10;
            width: 23;
            height: 14;
            text: "EN=0";
        }

        // source address register
        label {
            x: 10;
            y: 30;
            width: 20;
            height: 14;
            text: "SRC";
        }
        rectangle src_addr {
            x: 35;
            y: 30;
            width: 88;
            height: 14;
            text: "  0x 0000 0000";
        }

        // destination address register
        label {
            x: 10;
            y: 50;
            width: 20;
            height: 14;
            text: "DST";
        }
        rectangle dest_addr {
            x: 35;
            y: 50;
            width: 88;
            height: 14;
            text: "  0x 0000 0000";
        }

        // transfer size counter register
        label {
            x: 10;
            y: 70;
            width: 20;
            height: 14;
            text: "CNT";
        }
        rectangle transfer_counter_i {
            x: 35;
            y: 70;
            width: 30;
            height: 14;
            text: "4096";
        }

        // status register
        label status_reg {
            x: 89;
            y: 70;
            width: 25;
            height: 14;
            text: "ST=0";
        }        

        // interrupt enable bit
        label intr_enable {
            x: 167;
            y: 70;
            width: 25;
            height: 14;
            text: "IE=0";
        } 
        
        // transfer size
        label transf_size {
            x: 10;
            y: 90;
            width: 55;
            height: 14;
            text: "TRSZ=0000";
        }

        // burst size
        label burst_size {
            x: 90;
            y: 90;
            width: 45;
            height: 14;
            text: "BRSZ=000";
        }        

        // transfer width
        label transf_width {
            x: 165;
            y: 90;
            width: 25;
            height: 14;
            text: "TW=8";
        }  
        
        // hbusreq, hgrant and intr labels and pins
        
        label {
            x: 150;
            y: 10;
            width: 45;
            height: 14;
            text: "HBUSREQ";
        }
        right_arrow hbusreq_arrow_i {
            x: 200; y: 17;
        }

        label {
            x: 151;
            y: 27;
            width: 45;
            height: 14;
            text: "HGRANT";
        }
        left_arrow hgrant_arrow_i {
            x: 215; y: 34;
        }

        label {
            x: 163;
            y: 43;
            width: 35;
            height: 14;
            text: "INTR";
        }
        right_arrow intr_arrow_i {
            x: 200; y: 50;
        }
        
        // DMA-request and DMA-acknowledge labels
        label {
            x: 0;
            y: 122;
            width: 200;
            height: 15;
            text: "DMA-req / DMA-ack";

        }
        
        // DMA-req and DMA-ack pins
        label idx_0{
            x: 20;
            y: 135;
            width: 10;
            height: 15;
            text: "0";
        }
        up_arrow req_0_arrow_i {
            x: 20; y: 165;
        }
        down_arrow ack_0_arrow_i {
            x: 30; y: 150;
        }

        label idx_1{
            x: 70;
            y: 135;
            width: 10;
            height: 15;
            text: "1";
        }
        up_arrow req_1_arrow_i {
            x: 70; y: 165;
        }
        down_arrow ack_1_arrow_i {
             x: 80; y: 150;
        }

        label idx_2{
            x: 120;
            y: 135;
            width: 10;
            height: 15;
            text: "2";
        }
        up_arrow req_2_arrow_i {
            x: 120; y: 165;
        }
        down_arrow ack_2_arrow_i {
            x: 130; y: 150;
        }

        label idx_3{
            x: 170;
            y: 135;
            width: 10;
            height: 15;
            text: "3";
        }
        up_arrow req_3_arrow_i {
            x: 170; y: 165;
        }
        down_arrow ack_3_arrow_i {
            x: 180; y: 150;
        }

        
        rectangle slave_pins_i {
            x: 66; y: -21;
            width: 14;
            height: 20;
            fill_color: light_gray;
            line_color: light_gray;
            text: "S";
        }
        
        rectangle master_pins_i {
            x: 120; y: -21;
            width: 14;
            height: 20;
            fill_color: very_light_gray;
            line_color: very_light_gray;
            text: "M";
            text_color: light_gray;
        }
        
        
        //////////// OPERATION PRINTOUT //////////////
        label {
            x: 0;
            y: 190;
            width: 70;
            height: 20;
            text: "Transfer: ";
        }
        label transfer_label {
            x: -90;
            y: 210;
            width: 400;
            height: 20;
            text: "";
        }
    }


    
    ////////////////////////////////////////////////////////////////////
    //               ANIMATION FUNCTIONS AND PROCESSES
    ////////////////////////////////////////////////////////////////////

    nonsync function void animate_transf_width() {
        if(C_hsize == 0b00)
            transf_width.text = "TW=8";
        else if(C_hsize == 0b01)
            transf_width.text = "TW=16";
        else
            transf_width.text = "TW=32";
    }
    
    nonsync function void animate_src_address () {
        if( C_src_incr )
            src_addr.text = sprintf ("+ 0x %09 4H", C_src_addr);
        else
            src_addr.text = sprintf ("  0x %09 4H", C_src_addr);
    }

    nonsync function void animate_dest_address () {
        if( C_dest_incr )
            dest_addr.text = sprintf ("+ 0x %09 4H", C_dest_addr);
        else
            dest_addr.text = sprintf ("  0x %09 4H", C_dest_addr);
    }
    
    nonsync function void animate_transfer_counter () {
        transfer_counter.text = sprintf ("%d", C_transfer_counter);
        transfer_counter_i.text = sprintf ("%d", C_transfer_counter);
    }

    nonsync function void animate_sizes () {
        transf_size.text = sprintf ("TRSZ=%04d", effective_TS);
        burst_size.text  = sprintf ("BRSZ=%03d", C_burst_counter);
    }
    
    nonsync function void animate_req_idx () {
        decode (last_idx) {
        case 0: idx_0.text_color = black;
        case 1: idx_1.text_color = black;
        case 2: idx_2.text_color = black;
        case 3: idx_3.text_color = black;
        }
        if( C_config_DMA_Req_Enable ) {
            decode (C_DMA_req_idx) {
            case 0: idx_0.text_color = red;
            case 1: idx_1.text_color = red;
            case 2: idx_2.text_color = red;
            case 3: idx_3.text_color = red;
            }
        }
        last_idx = C_DMA_req_idx;
    }
    
    nonsync function void animate_enable_bit () {
        if( control_reg ) {
            //enable.text = "EN=1";
            enable_i.text = "EN=1";
        } else {
            //enable.text = "EN=0";
            enable_i.text = "EN=0";
        }
    }
    
    nonsync function void animate_status_and_intr () {
        if( status )
            status_reg.text = "ST=1";
        else
            status_reg.text = "ST=0";
            
        if( intr_status ) {
            intr_arrow.icon_color = red;
            intr_arrow_i.icon_color = red;
        } else {
            intr_arrow.icon_color = black;
            intr_arrow_i.icon_color = black;
        }
    }
    
    
    nonsync function void animate_ahb_master_mode ()
    {
        // external display
        master_pins.text_color = black;
        master_pins.fill_color = light_gray;
        master_pins.line_color = light_gray;
        
        slave_pins.text_color = light_gray;
        slave_pins.fill_color = very_light_gray;
        slave_pins.line_color = very_light_gray;

        // internal display
        master_pins_i.text_color = black;
        master_pins_i.fill_color = light_gray;
        master_pins_i.line_color = light_gray;
        
        slave_pins_i.text_color = light_gray;
        slave_pins_i.fill_color = very_light_gray;
        slave_pins_i.line_color = very_light_gray;         
    }
    
    nonsync function void animate_ahb_slave_mode ()
    {
        // external display
        slave_pins.text_color = black;
        slave_pins.fill_color = light_gray;
        slave_pins.line_color = light_gray;
        
        master_pins.text_color = light_gray;
        master_pins.fill_color = very_light_gray;
        master_pins.line_color = very_light_gray;        

        // internal display
        slave_pins_i.text_color = black;
        slave_pins_i.fill_color = light_gray;
        slave_pins_i.line_color = light_gray;
        
        master_pins_i.text_color = light_gray;
        master_pins_i.fill_color = very_light_gray;
        master_pins_i.line_color = very_light_gray;  
    }
        
    // processes for input-pins animation
    process  {
        wait( rise(HGRANT) );
        hgrant_arrow.icon_color = red;
        hgrant_arrow_i.icon_color = red;
        wait( fall(HGRANT) );
        hgrant_arrow.icon_color = black;
        hgrant_arrow_i.icon_color = black;
    }
    
    process  {
        wait( rise(DMA_REQ_0) );
        req_0_arrow.icon_color = red;
        req_0_arrow_i.icon_color = red;
        wait( fall(DMA_REQ_0) );
        req_0_arrow.icon_color = black;
        req_0_arrow_i.icon_color = black;
    }
    
    process  {
        wait( rise(DMA_REQ_1) );
        req_1_arrow.icon_color = red;
        req_1_arrow_i.icon_color = red;
        wait( fall(DMA_REQ_1) );
        req_1_arrow.icon_color = black;
        req_1_arrow_i.icon_color = black;
    }
    
    process  {
        wait( rise(DMA_REQ_2) );
        req_2_arrow.icon_color = red;
        req_2_arrow_i.icon_color = red;
        wait( fall(DMA_REQ_2) );
        req_2_arrow.icon_color = black;
        req_2_arrow_i.icon_color = black;
    }
    
    process  {
        wait( rise(DMA_REQ_3) );
        req_3_arrow.icon_color = red;
        req_3_arrow_i.icon_color = red;
        wait( fall(DMA_REQ_3) );
        req_3_arrow.icon_color = black;
        req_3_arrow_i.icon_color = black;
    }
    
    
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //                          BEHAVIOR
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    
    init {
        HBUSREQ = 0;
        HREADY = 0;
        INTR = 0;
        DMA_ACK_0 = 0;
        DMA_ACK_1 = 0;
        DMA_ACK_2 = 0;
        DMA_ACK_3 = 0;
        effective_TS = 4096;
    }

    // Globalni control registar u kojemu je samo bit
    // za enablanje kanala (lako je poslije dodati još jedan kanal).
    // Više ne trebaju zasebni bitovi Enable u kanalnim registrima
    reg <32> control_reg;    

    // samo najniži bit se gleda jer postoji samo jedan kanal
    reg <32> status;         // status-bistabil
    reg <32> intr_status;    // kopija stanja prekidne linije INTR jer je ona
							 // izlazna i ne može se čitati (status-bistabil
                             //	maskiran sa interrupt-enable bitom)

    reg<32> --C_dma_enable_changed;

   

    
    ////////////////////////////////////////////////////////////////////
    //                   AHB SLAVE PROTOCOL
    ////////////////////////////////////////////////////////////////////

    process slave_bus_access {
        init {
            var bits<32> addr;          // private registers (buffers)
            var bits<32> data;
            var bits<3>  size;
            var bits<1>  write;
            
            var bits<32> retval;
    
            HREADY = 0;
        }

        // [1] (clock high) -  wait for read/write to start (occures on clock high)

        wait rise(HSEL);

        // [1] clock low: read the adress, data size, and R/*W
        on_low(clock);
        
        addr = HADDR;
        size #= HSIZE;
        write #= HWRITE;

        // check size validity (must be word)
        if (size != 2) {
            retval = popup_error ( "Greška u komponenti DMAC",
                               "Za komunikaciju sa DMAC-om zabranjene su naredbe LDRB/STRB i LDRH/STRH",
                               "Ok");
            error;
        }

        // [2] clock high: writing or reading?
        on_high(clock);
        HREADY = 1;
        if (write == 1) {

            //////////////////////////////////////////////////////
            // WRITE OPERATION
            //////////////////////////////////////////////////////

            // [2] clock low: WRITE data
            on_low(clock);
            data = HWDATA;
            
            switch # (addr[0..15]) {

            ////////////////////////////////////////////////////
            // Common DMAC registers 
            // (samo je 1 kanal pa i nije baš neki common)
            ////////////////////////////////////////////////////

            // Control register (channel enable bit only)
            case 0x0000:
                // koristi se samo najniži bit
                data = data & 0x1;   
                if( control_reg == 0 && data == 1 ) {
                    // upravo je enejblan kanal
                    control_reg = 1;
                    animate_enable_bit ();
                    C_dma_enable_changed = 1;

                    if( log_dmac_events ) {
                        print "\n    DMAC: DMA enabled\n";
                    }
                } else if( control_reg == 1 && data == 0 ) {
                    // upravo je disejblan kanal
                    control_reg = 0;
                    animate_enable_bit ();
                    C_dma_enable_changed = 0;
                } // otherwise => control register is not changed
                  // => ignore
                break;                

            // Status Register (unmasked)
            case 0x0004:
                status = 0;
                intr_status = 0;
                INTR = 0;
                animate_status_and_intr();
                if( log_dmac_events ) {
                    print "\n    DMAC: Status is cleared\n";
                }
                break;


            ////////////////////////////////////////////////////
            // Channel 0 registers (jedini kanal za sada qqq)
            ////////////////////////////////////////////////////

            // Channel Source Address Register
            case 0x0010:
                if( control_reg != 0 ) {
                    retval = popup_error ( "Vjerojatna greška u komponenti DMAC",
                               "Upis u source registar u toku DMA-transfera se ignorira.\nTreba li prekinuti simulaciju?",
                               "Terminate", "Continue");
                    if( retval == 0 ) {
                        error;
                    }
                }
                C_src_addr = data;
                animate_src_address();
                break;

            // Channel Destination Address Register                    
            case 0x0014:
                if( control_reg != 0 ) {
                    retval = popup_error ( "Vjerojatna greška u komponenti DMAC",
                               "Upis u destination registar u toku DMA-transfera se ignorira.\nTreba li prekinuti simulaciju?",
                               "Terminate", "Continue");
                    if( retval == 0 ) {
                        error;
                    }
                }
                C_dest_addr = data;
                animate_dest_address();
                break;

            // Channel Sizes Register
            case 0x0018:
                if( control_reg != 0 ) {
                    retval = popup_error ( "Vjerojatna greška u komponenti DMAC",
                               "Upis u sizes registar u toku DMA-transfera se ignorira.\nTreba li prekinuti simulaciju?",
                               "Terminate", "Continue");
                    if( retval == 0 ) {
                        error;
                    }
                }
                C_sizes = data;

                if( C_sizes_Transf_Size == 0 )
                    effective_TS = 4096;
                else
                    effective_TS #= C_sizes_Transf_Size;

                C_burst_counter = 1#<32> << C_sizes_Burst_Size;
                animate_sizes ();  // qqq zove se samo ovdje - kod promjene registra Sizes
                if( effective_TS % C_burst_counter != 0 ) {
                    retval = popup_error ( "Greška u komponenti DMAC",
                               "Upis nedozvoljene vrijednosti u registar Sizes.\nDuljina transfera mora biti djeljiva s duljinom burst-a.",
                               "Ok");
                    error;
                }
                break;

            // Channel Configuration register
            case 0x001C:
                if( control_reg != 0 ) {
                    retval = popup_error ( "Vjerojatna greška u komponenti DMAC",
                               "Upis u channel configuration registar u toku DMA-transfera se ignorira.\nTreba li prekinuti simulaciju?",
                               "Terminate", "Continue");
                    if( retval == 0 ) {
                        error;
                    }
                }
                C_config = data;
                animate_status_and_intr();
                
                C_hsize #= C_config_Transf_Width;
                if( C_config_Transf_Width == 0b11 ) {
                    retval = popup_error ( "Greška u komponenti DMAC",
                               "Upis nedozvoljene vrijednosti 0b11 u bitove 28 do 29 konfiguracijskog registra",
                               "Ok");
                    error;
                }
                animate_transf_width();

                if( C_config_Dest_Incr == 0 )
                    C_dest_incr = 0;
                else
                    C_dest_incr = 1#<32> << C_hsize;

                if( C_config_Src_Incr == 0 )
                    C_src_incr = 0;
                else
                    C_src_incr = 1#<32> << C_hsize;

                C_DMA_req_idx #= C_config_DMA_Req_Idx;
                animate_req_idx();

                if( C_config_Intr_Enable == 0 )
                    intr_enable.text = "IE=0";
                else
                    intr_enable.text = "IE=1";

                break;

            default:
                retval = popup_error ( "Greška u komponenti DMAC",
                               "Upis u DMAC-sklop na nedefiniranu adresu.",
                               "Ok");
                error;
            }
            
        } else {
            //////////////////////////////////////////////////////
            // READ OPERATION
            //////////////////////////////////////////////////////

            // [2] clock fall: READ data
            on_fall (clock);
            data = 0;
            
            switch # (addr[0..15]) {

            ////////////////////////////////////////////////////
            // Common DMAC registers 
            // (samo je 1 kanal pa i nije baš neki common)
            ////////////////////////////////////////////////////

            // Control register (channel enable bit only)
            case 0x0000:
                HRDATA = control_reg;
                break;

            // Status Register (unmasked)
            case 0x0004:
                HRDATA = status;
                break;


            ////////////////////////////////////////////////////
            // Channel 0 registers (jedini kanal za sada qqq)
            ////////////////////////////////////////////////////

            // Channel Source Address Register                    
            case 0x0010:
                HRDATA = C_src_addr;
                break;

            // Channel Destination Address Register
            case 0x0014:
                HRDATA = C_dest_addr;
                break;

            // Channel Sizes Register
            case 0x0018:
                HRDATA = C_sizes;
                break;

            // Channel Configuration register
            case 0x001C:
                HRDATA = C_config;
                break;

            default:
                retval = popup_error ( "Greška u komponenti DMAC",
                               "Citanje s nedefinirane adrese u sklopu DMAC.",
                               "Ok");
                error;
            }
        }

        // [3] clock rise - remove data and disconnect from output bus
        on_rise (clock);
        disable HRDATA;
        HREADY = 0;
    }


    ////////////////////////////////////////////////////////////////////
    //                         AHB MASTER PROTOCOL
    //                         used by DMA-channel
    ////////////////////////////////////////////////////////////////////
    
    sync function ahb_m_read ()
    {
		var bits<32> retval;
	
		// check address alignment
		if(C_hsize == 0b10 && C_src_addr[0..1] != 0) {
            retval = popup_error ( "Greška u komponenti DMAC",
                               "DMAC pokušava čitati s adrese neporavnate na poluriječ.",
                               "Ok");
			error;
        } else if(C_hsize == 0b01 && C_src_addr[0] != 0) {
            retval = popup_error ( "Greška u komponenti DMAC",
                               "DMAC pokušava čitati s adrese neporavnate na riječ.",
                               "Ok");
			error;
		}
			
        // [1/] put adress on AHB
        on_high(clock);
            HADDRM = C_src_addr;
            HSIZEM = C_hsize;
            HWRITEM = 0;
            nMREQM = 0;

        // [2/] remove address from AHB and wait for HREADYM

        on_rise (clock); // address is leaved since adr/data phases are sequential
        wait rise(HREADYM); // qqq trebao bi biti osjetljiv na razinu, a ne na brid (i u arm-u)?

        // [2\] READ the data from AHB
        on_low(clock);
            C_DR = HRDATAM;

        // [3/] disable nMREQM
        on_rise (clock);
            nMREQM = 1;
            return;
    }

    sync function ahb_m_write ()
    {
		var bits<32> retval;
		
		// check address alignment
		if(C_hsize == 0b10 && C_dest_addr[0..1] != 0) {
            retval = popup_error ( "Greška u komponenti DMAC",
                               "DMAC pokušava pisati na adresu neporavnatu na poluriječ.",
                               "Ok");
			error;
        } else if(C_hsize == 0b01 && C_dest_addr[0] != 0) {
            retval = popup_error ( "Greška u komponenti DMAC",
                               "DMAC pokušava pisati na adresu neporavnatu na riječ.",
                               "Ok");
			error;
		}
		
        // [1/] put adress on AHB
        on_high(clock);
            HADDRM = C_dest_addr;
            HSIZEM = C_hsize;
            HWRITEM = 1;
            nMREQM = 0;

        // [2/] remove address from AHB and wait for HREADYM
        on_rise(clock); // address is leaved since adr/data phases are sequential
        
        wait rise(HREADYM);   // qqq trebao bi biti osjetljiv na razinu, a ne na brid (i u arm-u)?

        // [2\] WRITE the data to AHB
        on_fall(clock);
        
            HWDATAM = C_DR;

            // Animate transfer here, because it will not be printed
            // if at least one time-quantum is finished. A bit ugly...
            transfer_label.text = sprintf (
               "SRC[0x %09 4H] ---> data=0x %09 4H ---> DEST[0x %09 4H]",
               C_src_addr, C_DR, C_dest_addr
            );
            if( log_dmac_events ) {
                print "        DMAC: transfer SRC[0x", C_src_addr, "] ---> data=0x";
                print C_DR, " ---> DEST[0x", C_dest_addr, "]\n"; 
            }

        // [3/] disable nMREQM and HWDATAM
        on_rise (clock);
            nMREQM = 1;
            disable HWDATAM;
            return;
    }


    sync function request_bus ()
    {
        HBUSREQ = 1;
        hbusreq_arrow.icon_color = red;
        hbusreq_arrow_i.icon_color = red;

        wait ( rise (HGRANT) );
        if( log_dmac_events ) {
            print "      DMAC: take AHB\n";
        }
        nMREQM = 1;
        animate_ahb_master_mode();
    }


    sync function release_bus ()
    {
        disable HADDRM;
        disable HWDATAM;
        disable HSIZEM;
        disable HWRITEM;
        nMREQM = 1;  // like disable for wired-and wire
        HBUSREQ = 0;
// arm odmah reagira na fall HBUSREQ i u istom kvantu spušta HGRANT
// => ova funkcija nema trajanje
        hbusreq_arrow.icon_color = black;
        hbusreq_arrow_i.icon_color = black;
        animate_ahb_slave_mode();

        wait ( fall( HGRANT ) );
        if( log_dmac_events ) {
            print "      DMAC: release AHB\n";
        }
    }

    ////////////////////////////////////////////////////////////////////
    //                          DMA Channel
    ////////////////////////////////////////////////////////////////////
    
    // kanalni registri - za sada samo jedan kanal qqq

    reg <32> C_src_addr;
    reg <32> C_dest_addr;
	
    reg <32> C_sizes;
    reg <32> --effective_TS;
	/* BITOVI:
    Transf_Size   12 // 0 is illegal (for now, when only DMAC is flow controller)
    Burst_Size    3  // kodiranje 2^Burst_Size (1=SINGLE, 2, 4, 8, ... 128)
                     // Transfer_Size mora biti višekratnik od Burst_Size-a
	 */
	 
    reg <32> C_config;
    /* BITOVI:
    Dest_Incr     1
    Src_Incr      1
    Transf_Width  2  // isto kodiranje kao hsize: 0=B, 1=H, 2=W, 3=illegal
    Intr_Mask     1
    DMA_Req_Idx   2
    */
    

    reg <32> --C_transfer_counter;
    reg <32> --C_burst_counter;

    reg <32> --C_hsize;
    reg <32> --C_src_incr;
    reg <32> --C_dest_incr;

    reg <2> --C_DMA_req_idx;
    reg <2> --last_idx; // for animation only

    reg <32> --C_DR;  // data register (plain register instead of FIFO)

    function void wait_HW_dma_request ()
    {
        decode (C_DMA_req_idx) {
            case 0: {
                if(DMA_REQ_0 == 0)
                    wait rise(DMA_REQ_0);
                if( log_dmac_events ) {
                    print "    DMAC: receive DMA-request\n";
                }
                delay 1 clock / 4;
                DMA_ACK_0 = 1;
                ack_0_arrow.icon_color = red;
                ack_0_arrow_i.icon_color = red;
            }
            case 1: {
                if(DMA_REQ_1 == 0)
                    wait rise(DMA_REQ_1);
                if( log_dmac_events ) {
                    print "    DMAC: receive DMA-request\n";
                }
                delay 1 clock / 4;
                DMA_ACK_1 = 1;
                ack_1_arrow.icon_color = red;
                ack_1_arrow_i.icon_color = red;
            }
            case 2: {
                if(DMA_REQ_2 == 0)
                    wait rise(DMA_REQ_2);
                if( log_dmac_events ) {
                    print "    DMAC: receive DMA-request\n";
                }
                delay 1 clock / 4;
                DMA_ACK_2 = 1;
                ack_2_arrow.icon_color = red;
                ack_2_arrow_i.icon_color = red;
            }
            case 3: {
                if(DMA_REQ_3 == 0)
                    wait rise(DMA_REQ_3);
                if( log_dmac_events ) {
                    print "    DMAC: receive DMA-request\n";
                }
                delay 1 clock / 4;
                DMA_ACK_3 = 1;
                ack_3_arrow.icon_color = red;
                ack_3_arrow_i.icon_color = red;
            }
        }
    }

    function void finish_HW_dma_request ()
    {
        decode (C_DMA_req_idx) {
            case 0: 
                DMA_ACK_0 = 0;
                ack_0_arrow.icon_color = black;
                ack_0_arrow_i.icon_color = black;
            case 1: 
                DMA_ACK_1 = 0;
                ack_1_arrow.icon_color = black;
                ack_1_arrow_i.icon_color = black;
            case 2:
                DMA_ACK_2 = 0;
                ack_2_arrow.icon_color = black;
                ack_2_arrow_i.icon_color = black;
            case 3:
                DMA_ACK_3 = 0;
                ack_3_arrow.icon_color = black;
                ack_3_arrow_i.icon_color = black;
        }
        delay 1 clock /4;
    }

    process dma_transfer {
    
        // wait for a channel to be enabled in control register
        if( C_dma_enable_changed == 0 )
            while( C_dma_enable_changed == 0 )
                delay 1 clock /4;
        C_dma_enable_changed = 0;
        
        C_transfer_counter #= effective_TS;
        animate_transfer_counter ();
        
        do {
            if(C_config_DMA_Req_Enable) {
                wait_HW_dma_request();
            }

            // NOTE: for SINGLE transfer: C_burst_counter==1
            C_burst_counter = 1#<32> << C_sizes_Burst_Size;

            request_bus();
            if (control_reg[0] == 0) { // qqq ako je zaustavljanje OK
                release_bus();
                break;
            }

            // perform one burst of transfer (or single transfer for burst_size==1)
            while(C_burst_counter != 0) {

                // inform UI-unit that the last data of current burst
                // is about to be transferred
                if(C_burst_counter == 1) {
                    if(C_config_DMA_Req_Enable) {
                        finish_HW_dma_request();
                    }
                }

                // Transfer ONE data, 
                // print that (in ahb_m_write), 
                // and pause simulation if tracepoint is on
                ahb_m_read();
                ahb_m_write();

                if( pause_after_each_transferred_data ) {
                    pause; 
                }

                // Update coutners and addresses, and animate them
                C_burst_counter = C_burst_counter - 1;
                C_transfer_counter = C_transfer_counter - 1;
                animate_transfer_counter();
                C_src_addr  = C_src_addr  + C_src_incr;
                animate_src_address();
                C_dest_addr = C_dest_addr + C_dest_incr;
                animate_dest_address();
            }
            if( log_dmac_events && C_sizes_Burst_Size ) {
                print "        DMAC: one burst completed\n";
            }

            release_bus();

            if( C_transfer_counter != 0 ) {
                // qqq ako ima još blokova, onda se
                // pusti procesor da malo radi i da ne krene
                // odmah početak ove petlje bez kašnjenja
                delay 16 clock;
            }

        } while (C_transfer_counter != 0);
        
        // qqq ovaj uvjet ne mora uvijek biti istinit jer u
        // petlji postoji break koji se aktivira ako se programski
        //  zaustavi prijenos (što bi možda trebalo zabraniti)
        if( C_transfer_counter == 0 ) { 
            // The whole DMA-transfer has just finished
            status = 1;
            if(C_config_Intr_Enable) {
                intr_status = 1;
                INTR = 1;
            }
            animate_status_and_intr();
            if( log_dmac_events ) {
                print "    DMAC: Whole DMA-transfer is completed\n";
            }
            // disable this channel in the main control register
            control_reg[0] = 0;  
            animate_enable_bit ();
        }
    }
}

